# -*- coding: utf-8 -*-
"""lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15HM-3ZW3oKBRLoYNABJtFj1tFYX9jmql

# ***DECISION TREES***

### ***Cancer dataset***
"""

import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import f1_score
from sklearn.tree import export_graphviz
import graphviz
import pickle
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
from sklearn.metrics import mean_squared_error
import os

data_breast_cancer = datasets.load_breast_cancer(as_frame=True)

X_cancer = data_breast_cancer.data
y_cancer = data_breast_cancer.target

X_cancer_train, X_cancer_test, y_cancer_train, y_cancer_test = train_test_split(X_cancer, y_cancer, test_size=0.2, random_state=42)

X_cancer_train_texture_symmetry = X_cancer_train[["mean texture", "mean symmetry"]]
X_cancer_test_texture_symmetry = X_cancer_test[["mean texture", "mean symmetry"]]

tree_clf = DecisionTreeClassifier(max_depth=3, random_state=42)

"""***TRAIN SET***"""

tree_clf.fit(X_cancer_train_texture_symmetry, y_cancer_train)

y_cancer_train_pred = tree_clf.predict(X_cancer_train_texture_symmetry)

f1_score_train = f1_score(y_cancer_train_pred, y_cancer_train)

print(f1_score_train)

"""***TEST SET***"""

y_cancer_test_pred = tree_clf.predict(X_cancer_test_texture_symmetry)

f1_score_test = f1_score(y_cancer_test_pred, y_cancer_test)

print(f1_score_test)

"""***png***"""

f = "bc.dot"

export_graphviz(tree_clf,
                out_file=f,
                feature_names=['mean texture', 'mean symmetry'],
                class_names=[str(num)+", "+name
                             for num,name in
                             zip(set(y_cancer), data_breast_cancer.target_names)],
                rounded=True,
                filled=True)

graphviz.render('dot', 'png', f)

os.rename('bc.dot.png', 'bc.png')

acc_tree_clf_train = accuracy_score(y_cancer_train, y_cancer_train_pred)

acc_tree_clf_test = accuracy_score(y_cancer_test, y_cancer_test_pred)

f1acc_tree = [tree_clf.max_depth, f1_score_train, f1_score_test, acc_tree_clf_train, acc_tree_clf_test]

with open('f1acc_tree.pkl', 'wb') as f:
    pickle.dump(f1acc_tree, f)

print(f1acc_tree)

"""## ***REGRESSION***"""

size = 300
X = np.random.rand(size)*5-2.5
w4, w3, w2, w1, w0 = 1, 2, 1, -4, 2
y = w4*(X**4) + w3*(X**3) + w2*(X**2) + w1*X + w0 + np.random.randn(size)*8-4
df = pd.DataFrame({'x': X, 'y': y})
df.plot.scatter(x='x',y='y')

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

tree_reg = DecisionTreeRegressor(max_depth=3, random_state=42)

X_train = X_train.reshape(-1, 1)

tree_reg.fit(X_train, y_train)

y_train_pred = tree_reg.predict(X_train)

mse_train = mean_squared_error(y_train_pred, y_train)

X_test = X_test.reshape(-1, 1)

y_test_pred = tree_reg.predict(X_test)

mse_test = mean_squared_error(y_test_pred, y_test)

df.columns

g = "reg.dot"

export_graphviz(tree_reg,
                out_file=g,
                feature_names=['x'],
                class_names=[str(num)+", "+name
                             for num,name in
                             zip(set(y), ['x'])],
                rounded=True,
                filled=True)

graphviz.render('dot', 'png', g)

os.rename('reg.dot.png', 'reg.png')

mse_tree = [tree_reg.max_depth, mse_train, mse_test]

with open('mse_tree.pkl', 'wb') as f:
    pickle.dump(mse_tree, f)